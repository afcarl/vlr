% PERFORMANCEBAT
% This function analyzes the performance of the VLR model using the fitted
% parameter images in o.B{idx.c} -- i.e. one cross validation fold.
% To do this efficiently, several MATLAB instances are spawned to compute
% the anaysis in parallel. The function called by the spawns is performancei.
% Data for each each analysis (h,B,thr) are saved to a .mat file.
% Temporary images for each subject (for spmdeform) are saved in
% a subject-specific folder.
% The temporary folders are generated by tmpname.

function [o,t] = performancebat(h,o,t,idx)
[file] = filenames(idx);            % create the filenames
cleanup(file);                      % cleanup tmp files & folders (pre)
writemat(file,h,o,idx);             % write the common mat file for loading
writebat(file,h,idx);               % write the bat file (and wait for it to be done)
while(~fileready(file.bat,1000) || ~fileready(file.mat.c,1000)), pause(0.1); end
eval(['!call ',file.bat,' &']);     % execute the bat file
%eval(['!start cmd /c ',file.bat,' &']);     % execute the bat file
[o,t] = getresults(file,h,o,t,idx); % collect the results as the become available
cleanup(file);                      % cleanup tmp files & folders (post)

function [file,cidx] = filenames(idx)
cidx = find(idx.i.valid);
file.tmp   = tmpname('*');
file.bat   = fullfile(pwd,'tmp.bat');
file.mat.c = tmpname('c',idx.c,'.mat');
for n = 1:numel(cidx)
  file.mat.i{n} = tmpname('i',cidx(n),'.mat');
end

function [] = writemat(file,h,o,idx)
B   = o.B{idx.c};
thr = o.thr(idx.c);
save(file.mat.c,'h','B','thr');

function [] = writebat(file,h,idx)
% the code for execution
code = 'performancei(%d,[#]);';
% group the indices
cidx = find(idx.i.valid);
Ni   = numel(cidx);
Nib  = ceil(Ni./h.cv.cpu);
bat = {[10]};
% create the file contents
for n = 1:min(h.cv.cpu,Ni)
  i      = num2cell(cidx(n:h.cv.cpu:Ni));
  nib    = numel(i);
  numstr = sprintf(repmat('%02.f,',[1,nib]),i{:});
  codi   = sprintf(strrep(code,'#',numstr),idx.c);
  bat{end+1} = ['@echo ANALYZING IMAGES ',numstr,'...',10];
  bat{end+1} = ['@',matx(codi),10];
  %bat{end+1} = ['@timeout 1 > nul',10];
end
bat{end+1} = 'exit';
% write the file
fid = fopen(file.bat,'w');
fwrite(fid,cat(2,bat{:}));
fclose(fid);

function [o,t] = getresults(file,h,o,t,idx)
cidx = find(idx.i.valid);
Ni   = numel(cidx);
done = false(size(cidx));
% while waiting for some mat files to finish
while(~all(done))
  % check all
  for n = 1:Ni
    i = cidx(n);
    % if file exists and hasn't been modified in 2500 ms
    if fileready(file.mat.i{n},2500)
      load(file.mat.i{n},'p'); % load and distribute results
      o.si(i) = p.si; o.pr(i) = p.pr; o.re(i) = p.re;
      o.ll(i) = p.ll; o.lle(i) = p.lle;
      t.TP{i} = p.TP; t.FP{i} = p.FP; t.FN{i} = p.FN;
      delete(file.mat.i{n});   % then delete the mat file
      done(n) = true;          % check this one off
      statusbar(Ni,sum(done),h.Ni/3,1);
    end
  end
  pause(0.1);
end
% saving every B consumes too much memory in LOO-CV
if strcmp(h.name.cv,'loo');
  o.B{idx.c} = {};
end

function [] = cleanup(file)
if exist(file.bat,'file')
  delete(file.bat);
end
if exist(file.mat.c,'file')
  delete(file.mat.c); 
end
droot = fileparts(file.tmp);
F = dir(file.tmp);
F = F(arrayfun(@(x)(~any(strcmp(x.name,{'.','..'}))),F));
for f = 1:numel(F)
  pathname = fullfile(droot,F(f).name);
  if exist(pathname,'dir')
    rmdir(pathname,'s');
  elseif exist(pathname,'file')
    delete(pathname);
  end
end